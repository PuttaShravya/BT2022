import numpy as np
from scipy.stats import t
from scipy.stats import ttest_1samp
from scipy.stats import chi2

# dataset. Put your data here
data = [
        2.30325,
        2.44828,
        4.07935,
        5.2704,
        4.15374,
        5.37603,
        2.82227,
        1.82795,
        2.27955,
        4.34784,
        4.74366,
        0.250392,
        2.95455,
        0.440711,
        3.76252,
        2.53444,
        2.02008,
        2.2587,
        1.4268,
        3.61896,
        0.846236,
        2.75632,
        1.38796,
        5.07948,
        4.51331,
        2.73155,
        5.60615,
        0.764221,
        4.08844,
        0.18184,
        4.74153,
        2.20637,
        0.930488,
        0.924742,
        4.60013,
        3.22008,
        4.06468,
        1.92297,
        3.76098,
        5.4879,
        1.84681,
        3.75021,
        3.52374,
        5.19589,
        3.91922,
        4.5471,
        3.33697,
        4.9432,
        1.99512,
        3.51909,
        0.679735,
        2.97635,
        4.12024,
        0.645567,
        3.69677,
        1.48863,
        0.572611,
        1.25594,
        4.01509,
        4.04156,
        5.54901,
        1.42483,
        5.73508,
        0.680539,
        5.24687,
        4.71768,
        2.73848,
        4.64516,
        3.90497,
        0.455589,
        5.43144,
        0.721014,
        2.2531,
        2.6969,
        0.487903,
        3.90131,
        1.19712,
        2.42059,
        0.495839,
        3.70708,
        0.551505,
        3.51926,
        1.38065,
        1.87904,
        4.38056,
        1.53077,
        0.121596,
        1.24735,
        4.65206,
        1.62779,
        1.05645,
        4.5295,
        2.08978,
        0.131234,
        0.597221,
        0.157682,
        5.52086,
        4.23944,
        0.164631,
        1.57626,
        5.48413,
        3.0188,
        1.04036,
        5.75646,
        3.21142,
        1.13055,
        5.33508,
        5.26073,
        0.416986,
        3.15279,
        4.40586,
        0.558782,
        4.31634,
        3.80786,
        3.09708,
        2.69849,
        5.09453,
        4.10891,
        1.86768,
        2.01119,
        2.79679,
        4.74034,
        0.520859,
        4.60491,
        5.38473,
        1.96468,
        3.00609,
        2.44294,
        0.240005,
        2.71277,
        4.06318,
        3.25275,
        4.94478,
        1.33367,
        4.40613,
        4.82614,
        1.89523,
        0.788317,
        4.14393,
        1.25782,
        2.24839,
        4.17384,
        5.11404,
        2.35645,
        5.29564,
        4.07546,
        4.10013,
        4.9804,
        2.61604,
        1.44799
        ]


# Parameters
alpha = 0.0492278 #your alpha may be different, please change.
sample_size = 24 # number of elemtents in one row in second dataset
n_samples = 58 # number of rows in second dataset


data_2 = [
        [138, 117, 3, 17, 70, 35, 58, 106, 94, 125, 19, 91, 126, 134, 20, 136, 127, 97, 115, 2, 45, 149, 69, 37],
        [106, 74, 4, 19, 2, 112, 29, 61, 109, 133, 135, 30, 47, 67, 81, 69, 146, 76, 16, 55, 99, 102, 66, 14],
        [146, 135, 64, 50, 139, 125, 84, 105, 67, 42, 111, 27, 46, 117, 44, 99, 94, 55, 59, 131, 28, 76, 8, 35],
        [44, 111, 70, 130, 49, 125, 115, 46, 87, 48, 124, 147, 41, 100, 127, 36, 134, 40, 62, 120, 123, 148, 26, 106],
        [31, 8, 65, 40, 45, 85, 134, 57, 26, 63, 150, 106, 39, 144, 109, 15, 128, 49, 126, 112, 129, 82, 84, 131],
        [2, 142, 25, 92, 97, 138, 49, 47, 43, 13, 95, 120, 78, 90, 128, 57, 64, 16, 87, 79, 115, 134, 26, 101],
        [150, 143, 88, 63, 60, 113, 55, 136, 61, 101, 40, 65, 144, 43, 36, 116, 46, 18, 25, 127, 96, 106, 68, 42],
        [17, 125, 46, 132, 76, 36, 138, 56, 119, 21, 89, 133, 59, 99, 102, 26, 70, 82, 54, 37, 83, 67, 13, 135],
        [131, 67, 73, 135, 96, 56, 148, 40, 90, 11, 80, 144, 121, 113, 74, 72, 59, 98, 26, 35, 15, 115, 24, 143],
        [87, 150, 3, 114, 124, 73, 95, 133, 2, 10, 40, 22, 132, 131, 107, 146, 39, 149, 59, 55, 68, 80, 115, 111],
        [71, 11, 93, 23, 46, 52, 128, 40, 111, 26, 4, 92, 3, 35, 62, 94, 150, 90, 37, 119, 68, 97, 5, 6],
        [116, 3, 27, 41, 66, 147, 129, 74, 102, 122, 121, 80, 22, 134, 23, 21, 81, 90, 97, 120, 72, 60, 4, 83],
        [100, 4, 123, 59, 27, 1, 127, 78, 10, 110, 81, 145, 8, 16, 35, 93, 99, 48, 131, 108, 148, 94, 121, 29],
        [122, 139, 49, 147, 6, 3, 81, 96, 17, 135, 57, 101, 121, 146, 83, 62, 100, 68, 127, 84, 141, 60, 56, 114],
        [30, 35, 139, 77, 33, 66, 90, 99, 71, 60, 143, 147, 37, 140, 49, 1, 118, 15, 136, 142, 24, 84, 12, 115],
        [116, 89, 20, 36, 41, 25, 46, 22, 141, 75, 105, 30, 126, 91, 42, 12, 49, 90, 78, 139, 110, 16, 87, 26],
        [44, 24, 9, 81, 3, 30, 48, 77, 38, 106, 12, 13, 130, 53, 127, 102, 39, 108, 134, 15, 140, 96, 76, 1],
        [71, 95, 138, 118, 27, 54, 84, 80, 7, 86, 51, 82, 14, 135, 1, 60, 112, 39, 128, 121, 40, 16, 105, 107],
        [9, 25, 18, 69, 140, 100, 36, 11, 108, 98, 109, 44, 1, 93, 83, 42, 149, 5, 95, 39, 26, 40, 22, 131],
        [31, 138, 74, 144, 102, 2, 78, 90, 16, 105, 83, 80, 35, 148, 4, 5, 107, 140, 93, 65, 99, 60, 122, 150],
        [62, 39, 115, 37, 111, 83, 50, 131, 124, 112, 25, 106, 86, 125, 67, 32, 41, 22, 133, 99, 15, 80, 7, 34],
        [43, 106, 90, 21, 96, 115, 66, 91, 48, 56, 31, 35, 148, 85, 143, 52, 20, 1, 86, 25, 45, 114, 141, 69],
        [74, 51, 35, 68, 113, 24, 100, 65, 71, 86, 138, 73, 147, 114, 146, 15, 56, 29, 81, 103, 92, 95, 96, 82],
        [148, 105, 49, 17, 131, 53, 110, 106, 59, 43, 61, 12, 120, 117, 70, 133, 119, 52, 141, 40, 32, 25, 97, 81],
        [55, 33, 18, 2, 124, 57, 101, 32, 75, 115, 89, 147, 138, 20, 148, 70, 79, 7, 61, 21, 97, 133, 114, 66],
        [8, 112, 79, 125, 18, 133, 55, 46, 56, 147, 129, 15, 98, 91, 115, 14, 121, 78, 35, 113, 64, 108, 122, 90],
        [118, 131, 90, 145, 134, 49, 97, 133, 4, 50, 146, 51, 139, 60, 20, 114, 120, 98, 64, 35, 117, 87, 88, 130],
        [74, 38, 79, 112, 18, 15, 119, 110, 3, 50, 103, 71, 128, 13, 19, 90, 2, 149, 142, 48, 137, 78, 73, 114],
        [22, 66, 8, 139, 72, 115, 148, 46, 102, 75, 141, 94, 121, 142, 73, 114, 112, 67, 36, 59, 4, 81, 146, 134],
        [37, 64, 150, 31, 108, 121, 114, 134, 76, 39, 47, 43, 118, 74, 60, 127, 18, 22, 45, 98, 123, 119, 81, 67],
        [140, 78, 40, 35, 5, 80, 65, 137, 129, 34, 63, 26, 76, 125, 100, 6, 82, 103, 116, 96, 136, 50, 29, 149],
        [108, 99, 98, 116, 31, 20, 120, 14, 81, 43, 77, 147, 44, 126, 63, 78, 97, 21, 37, 90, 104, 82, 15, 52],
        [61, 92, 62, 124, 27, 72, 65, 24, 98, 105, 133, 25, 125, 44, 60, 140, 10, 82, 38, 17, 9, 69, 45, 14],
        [64, 63, 11, 46, 21, 103, 118, 77, 142, 115, 71, 130, 39, 30, 65, 48, 110, 40, 94, 17, 1, 66, 20, 9],
        [82, 117, 81, 98, 54, 76, 15, 90, 36, 44, 86, 43, 100, 113, 132, 84, 1, 108, 9, 88, 29, 79, 97, 126],
        [22, 76, 8, 31, 144, 49, 98, 25, 21, 148, 118, 26, 112, 101, 87, 113, 53, 93, 67, 59, 39, 74, 44, 117],
        [59, 121, 58, 67, 124, 31, 6, 106, 8, 69, 75, 48, 97, 84, 93, 54, 109, 85, 72, 14, 23, 74, 36, 134],
        [47, 138, 69, 101, 45, 36, 121, 12, 66, 119, 58, 37, 2, 133, 94, 134, 110, 51, 23, 137, 139, 127, 31, 49],
        [143, 85, 129, 110, 35, 37, 126, 133, 147, 26, 125, 21, 25, 20, 1, 97, 109, 39, 47, 10, 72, 15, 88, 124],
        [29, 26, 112, 91, 18, 37, 5, 16, 66, 107, 115, 35, 100, 124, 135, 25, 22, 106, 101, 12, 63, 103, 47, 11],
        [44, 36, 3, 119, 127, 83, 1, 141, 39, 78, 89, 67, 60, 28, 116, 11, 98, 142, 73, 66, 120, 117, 76, 135],
        [83, 58, 2, 61, 70, 72, 129, 142, 39, 36, 7, 124, 112, 103, 41, 18, 12, 40, 51, 23, 79, 86, 69, 114],
        [66, 14, 81, 87, 20, 111, 129, 123, 77, 78, 144, 136, 34, 69, 26, 19, 12, 97, 5, 16, 118, 3, 46, 7],
        [19, 65, 68, 132, 96, 118, 87, 97, 106, 60, 56, 119, 55, 103, 142, 74, 77, 147, 49, 46, 128, 26, 144, 141],
        [11, 7, 17, 53, 88, 3, 38, 110, 92, 116, 120, 132, 64, 42, 83, 125, 86, 59, 109, 119, 54, 135, 40, 79],
        [15, 124, 112, 94, 36, 11, 28, 69, 23, 63, 21, 32, 89, 100, 150, 141, 105, 46, 16, 121, 126, 17, 55, 48],
        [131, 84, 115, 29, 99, 111, 63, 71, 6, 62, 51, 72, 8, 58, 18, 49, 149, 116, 90, 96, 17, 40, 104, 89],
        [39, 31, 120, 42, 142, 87, 71, 25, 38, 147, 135, 96, 121, 58, 21, 144, 68, 81, 108, 98, 8, 118, 103, 60],
        [129, 128, 73, 85, 34, 132, 121, 68, 95, 33, 3, 126, 150, 74, 31, 81, 114, 18, 80, 96, 60, 54, 29, 100],
        [85, 52, 78, 57, 71, 36, 125, 34, 58, 18, 116, 35, 87, 129, 118, 119, 149, 54, 16, 15, 69, 90, 89, 144],
        [127, 30, 2, 92, 119, 17, 139, 142, 26, 108, 123, 33, 32, 80, 64, 14, 69, 13, 72, 4, 29, 97, 96, 95],
        [39, 133, 84, 33, 45, 70, 28, 141, 62, 4, 69, 22, 57, 30, 34, 54, 35, 122, 79, 142, 18, 126, 94, 102],
        [1, 116, 28, 83, 23, 117, 49, 142, 47, 112, 52, 89, 77, 87, 99, 118, 60, 51, 80, 68, 41, 105, 110, 84],
        [101, 63, 27, 37, 132, 119, 8, 64, 29, 71, 10, 92, 73, 124, 47, 31, 62, 140, 87, 11, 121, 148, 138, 105],
        [54, 79, 89, 69, 81, 118, 77, 15, 103, 141, 32, 97, 134, 136, 96, 86, 10, 142, 70, 91, 122, 59, 53, 45],
        [18, 33, 77, 99, 83, 37, 142, 35, 140, 50, 138, 86, 56, 72, 4, 55, 26, 132, 100, 115, 127, 19, 6, 129],
        [107, 19, 49, 148, 32, 109, 15, 143, 1, 26, 29, 104, 12, 85, 97, 138, 93, 60, 46, 129, 142, 6, 24, 37],
        [99, 147, 139, 130, 106, 36, 60, 33, 89, 84, 43, 50, 56, 31, 103, 20, 91, 118, 12, 80, 13, 145, 27, 112]
]


# Lists to store Z values
Z_values = []

# Generating sub-samples and calculation of sample means and variances
for i in range(n_samples):
    list = data_2[i]

    sub_sample = []

    for index in list:
      sub_sample.append(data[index-1])
    Z_value = np.sum(sub_sample)/np.sqrt(sample_size)
    Z_values.append(Z_value)

# population mean and variance
sample_mean = np.mean(data)
sample_variance = np.var(data, ddof=1)

# Calculation of probable range of population mean using CLT
mean_standard_error = np.std(Z_values, ddof=1) / np.sqrt(n_samples)
mean_margin_of_error = t.ppf(1 - alpha/2, n_samples - 1) * mean_standard_error
mean_low = (np.mean(Z_values) - mean_margin_of_error)/np.sqrt(sample_size)
mean_high = (np.mean(Z_values) + mean_margin_of_error)/np.sqrt(sample_size)

# Calculation of probable range of population variance using Chi-square distribution
variance_alpha = alpha / 2
variance_df = n_samples - 1
variance_chi2_low = variance_df * np.var(Z_values, ddof=1)/ chi2.ppf(1 - variance_alpha, variance_df)
variance_chi2_high = variance_df * np.var(Z_values, ddof=1) / chi2.ppf(variance_alpha, variance_df)

# one-sample t-test for null hypothesis that sample is from a normal population with zero population mean
t_statistic, p_value = ttest_1samp(a = Z_values, popmean = 0)

# Print results
print("Probable range of population mean: ({:.8f}, {:.8f})".format(mean_low, mean_high))
print("Probable range of population variance: ({:.8f}, {:.8f})".format(variance_chi2_low, variance_chi2_high))
print("P-value related to null hypothesis: {:.8e}".format(p_value)) # such a small value
