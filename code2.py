import numpy as np
from scipy.stats import t, f

alpha_star = 0.0338074

data = [
    [9.57889, 13.0226],
    [2.46919, 7.62277],
    [6.26268, 0.60053],
    [5.8995, 7.81079],
    [2.51747, 13.9907],
    [6.08516, 14.8137],
    [0.0795346, 16.0622],
    [1.26168, 12.0751],
    [3.40969, 4.0343],
    [1.34526, 8.93279],
    [8.41758, 2.3285],
    [6.12742, 13.9786],
    [2.94737, 4.7367],
    [9.26217, 10.1944],
    [2.71936, 4.43739],
    [3.60833, 12.6979],
    [4.40188, 7.30653],
    [10.1698, 8.18897],
    [2.53989, 16.7287],
    [4.87498, 8.66867],
    [10.5839, 14.5481],
    [1.74235, 12.39],
    [10.3398, 1.86083],
    [0.269351, 14.4427],
    [0.27085, 5.95772],
    [0.769199, 13.9508],
    [1.21252, 6.4604],
    [0.562984, 5.49679],
    [5.4379, 12.8313],
    [9.95737, 5.15131],
    [4.50675, 14.2255],
    [5.76727, 16.1807],
    [2.91235, 2.75462],
    [9.46012, 8.50879],
    [2.32935, 14.112],
    [10.2331, 12.7283],
    [4.58269, 1.16932],
    [6.54241, 11.8163],
    [4.7724, 8.69489],
    [6.0947, 12.6772],
    [2.7478, 6.07336],
    [5.6301, 13.5909],
    [10.4288, 5.3577],
    [3.78189, 5.58551],
    [10.2353, 1.47444],
    [0.978994, 1.47385],
    [8.88514, 3.52842],
    [8.71645, 7.32016],
    [7.61763, 9.55955],
    [10.7328, 2.49784],
    [6.30936, 0.534866],
    [9.51052, 4.77345],
    [4.30962, 15.6912],
    [0.130472, 11.8857],
    [10.5926, 14.2997],
    [10.6375, 13.2078],
    [3.16203, 3.73865],
    [0.654112, 15.6742],
    [7.40973, 12.1643],
    [0.647145, 14.2152],
    [1.74979, 12.0147],
    [9.69446, 2.82452],
    [5.93169, 15.9094],
    [9.95291, 16.5904],
    [3.00426, 3.83701],
    [10.9812, 10.2036],
    [9.28995, 14.6736],
    [9.99792, 4.81092],
    [9.36506, 7.37435],
    [1.05111, 3.54555],
    [7.90009, 8.51656],
    [5.22179, 5.4687],
    [8.96124, 16.688],
    [2.8405, 11.5955],
    [4.31183, 14.0215]
]



# RANDOM NUMBERS FOR SAMPLE 1

indices1 = [
    [3, 56, 40, 35, 49, 75, 38, 5, 23, 25, 69, 63, 48, 21, 54],
    [28, 62, 16, 9, 44, 46, 58, 34, 26, 42, 70, 53, 7, 35, 27],
    [8, 53, 33, 57, 63, 10, 28, 5, 49, 43, 59, 27, 22, 60, 56],
    [22, 55, 72, 56, 60, 36, 65, 7, 10, 70, 26, 19, 39, 25, 31],
    [60, 2, 1, 73, 35, 50, 28, 71, 75, 66, 34, 72, 43, 22, 32],
    [58, 65, 29, 68, 17, 13, 63, 64, 36, 16, 22, 55, 54, 71, 30],
    [72, 20, 49, 68, 17, 2, 58, 63, 48, 70, 27, 7, 28, 54, 11],
    [41, 45, 58, 9, 42, 24, 6, 20, 52, 74, 4, 8, 34, 57, 25],
    [17, 61, 19, 75, 9, 30, 60, 65, 66, 40, 10, 32, 28, 22, 47],
    [58, 38, 39, 18, 65, 10, 7, 41, 24, 37, 11, 17, 27, 44, 8],
    [19, 61, 38, 73, 28, 48, 3, 34, 62, 68, 11, 12, 33, 59, 71],
    [74, 6, 25, 46, 28, 9, 30, 59, 20, 17, 37, 71, 38, 61, 39],
    [5, 36, 37, 18, 75, 44, 65, 31, 64, 54, 39, 33, 56, 67, 25],
    [31, 19, 65, 9, 26, 61, 68, 18, 10, 16, 67, 17, 2, 23, 69],
    [61, 48, 59, 20, 1, 34, 58, 24, 33, 29, 65, 11, 45, 18, 68],
    [68, 48, 2, 54, 75, 45, 47, 60, 62, 36, 72, 49, 1, 35, 30],
    [2, 31, 50, 30, 68, 11, 25, 7, 51, 5, 52, 47, 22, 23, 55],
    [38, 49, 41, 63, 50, 21, 34, 14, 51, 32, 13, 7, 55, 3, 44],
    [28, 55, 3, 1, 69, 38, 52, 54, 42, 6, 71, 74, 23, 18, 62],
    [22, 46, 4, 28, 51, 21, 75, 17, 18, 7, 20, 33, 59, 8, 23],
    [69, 52, 34, 54, 56, 21, 28, 59, 42, 75, 51, 68, 31, 4, 35],
    [67, 33, 27, 73, 25, 28, 58, 46, 62, 36, 60, 69, 13, 17, 38],
    [15, 34, 47, 18, 8, 21, 7, 61, 26, 16, 32, 9, 67, 31, 48],
    [15, 64, 10, 36, 28, 5, 61, 62, 60, 21, 26, 33, 70, 18, 32],
    [56, 57, 36, 68, 58, 2, 46, 16, 60, 61, 64, 6, 24, 26, 8],
    [51, 31, 69, 25, 22, 50, 59, 57, 68, 65, 14, 5, 19, 12, 41],
    [56, 21, 8, 24, 46, 15, 68, 16, 60, 45, 66, 55, 37, 36, 7],
    [25, 70, 26, 52, 65, 1, 9, 29, 27, 63, 45, 74, 36, 56, 54],
    [45, 68, 50, 64, 55, 54, 29, 38, 71, 30, 21, 24, 9, 58, 37],
    [15, 34, 6, 16, 43, 40, 59, 65, 21, 67, 41, 24, 53, 25, 32],
    [36, 7, 3, 25, 12, 74, 66, 45, 72, 73, 47, 67, 49, 31, 53],
    [8, 52, 68, 54, 22, 37, 27, 26, 60, 3, 9, 66, 43, 46, 7],
    [3, 52, 59, 70, 68, 33, 21, 14, 75, 58, 17, 67, 40, 13, 5],
    [44, 53, 70, 20, 57, 42, 65, 41, 66, 56, 11, 39, 19, 10, 26],
    [72, 61, 53, 65, 52, 55, 14, 75, 19, 38, 27, 62, 71, 48, 46],
    [28, 21, 9, 15, 75, 74, 58, 48, 11, 34, 50, 10, 35, 64, 18],
    [4, 38, 29, 40, 19, 49, 9, 72, 75, 59, 43, 8, 41, 7, 42],
    [67, 61, 75, 13, 43, 48, 46, 45, 42, 39, 36, 30, 56, 65, 57],
    [52, 30, 53, 62, 13, 58, 73, 69, 72, 6, 29, 27, 55, 48, 11],
    [17, 40, 20, 67, 60, 29, 37, 30, 69, 27, 10, 6, 72, 57, 21],
    [22, 10, 17, 61, 75, 32, 69, 43, 4, 57, 33, 68, 6, 60, 51],
    [66, 21, 42, 13, 52, 18, 57, 64, 56, 59, 60, 14, 9, 33, 62],
    [58, 63, 54, 19, 26, 33, 50, 7, 13, 48, 37, 6, 59, 4, 55],
    [39, 5, 25, 18, 74, 67, 44, 65, 47, 6, 2, 33, 4, 73, 55],
    [39, 17, 54, 38, 30, 7, 72, 60, 15, 62, 4, 10, 6, 69, 19],
    [43, 55, 1, 15, 75, 70, 6, 36, 21, 38, 71, 23, 7, 64, 51],
    [40, 63, 62, 42, 68, 73, 18, 49, 57, 25, 27, 54, 30, 24, 45],
    [65, 63, 2, 51, 60, 48, 6, 54, 42, 21, 27, 73, 53, 52, 32],
    [5, 13, 30, 2, 38, 49, 22, 7, 75, 50, 4, 16, 11, 32, 46],
    [10, 23, 17, 67, 52, 73, 56, 62, 69, 50, 27, 26, 42, 15, 63],
    [67, 50, 37, 35, 54, 69, 58, 59, 51, 68, 24, 33, 74, 45, 44],
    [4, 5, 58, 24, 46, 6, 73, 74, 3, 60, 29, 11, 15, 56, 65],
    [51, 63, 8, 56, 73, 64, 31, 74, 27, 32, 69, 23, 43, 53, 19],
    [39, 43, 67, 36, 30, 65, 22, 66, 55, 49, 71, 46, 58, 12, 60],
    [70, 42, 39, 37, 55, 33, 72, 5, 20, 66, 7, 47, 48, 43, 2],
    [34, 46, 68, 62, 63, 49, 8, 40, 53, 65, 3, 66, 25, 1, 57],
    [40, 26, 22, 47, 42, 37, 28, 64, 66, 63, 60, 6, 4, 51, 49],
    [39, 57, 26, 8, 32, 69, 13, 21, 53, 2, 22, 1, 15, 74, 33],
    [2, 64, 27, 67, 16, 43, 55, 31, 21, 40, 24, 25, 26, 46, 50],
    [26, 36, 67, 16, 28, 64, 70, 1, 14, 34, 2, 55, 56, 29, 8],
    [71, 29, 70, 15, 1, 28, 72, 61, 48, 45, 52, 8, 54, 37, 4]
]



# RANDOM NUMBERS FOR SAMPLE 2

indices2 = [
    [65, 7, 2, 66, 8, 64, 26, 3, 41, 58, 47, 6, 12, 63, 13],
    [65, 2, 36, 9, 53, 8, 63, 58, 74, 70, 20, 24, 4, 60, 39],
    [69, 40, 70, 55, 22, 38, 64, 59, 47, 68, 5, 29, 52, 33, 51],
    [28, 9, 71, 57, 12, 74, 14, 65, 61, 23, 45, 15, 17, 10, 24],
    [26, 37, 21, 13, 69, 29, 25, 33, 70, 10, 68, 51, 20, 52, 9],
    [7, 59, 57, 32, 33, 69, 30, 25, 9, 27, 43, 15, 53, 31, 13],
    [35, 16, 10, 70, 68, 72, 37, 1, 21, 25, 46, 69, 55, 57, 12],
    [61, 71, 12, 29, 60, 72, 49, 65, 47, 66, 17, 36, 32, 68, 27],
    [26, 2, 51, 66, 18, 40, 19, 56, 31, 36, 52, 48, 15, 14, 38],
    [27, 16, 49, 11, 64, 51, 20, 14, 46, 22, 71, 45, 18, 26, 37],
    [48, 27, 52, 55, 59, 13, 31, 43, 56, 15, 29, 12, 17, 30, 26],
    [20, 10, 7, 75, 23, 52, 40, 51, 42, 27, 26, 44, 3, 47, 12],
    [16, 72, 44, 34, 18, 56, 7, 54, 10, 31, 53, 62, 47, 27, 28],
    [48, 41, 18, 25, 68, 14, 70, 27, 46, 34, 54, 20, 42, 59, 55],
    [55, 20, 17, 35, 73, 13, 43, 18, 31, 34, 27, 33, 3, 46, 48],
    [73, 71, 30, 52, 22, 65, 42, 35, 62, 51, 66, 58, 53, 36, 43],
    [24, 15, 56, 22, 64, 50, 49, 25, 53, 75, 33, 37, 73, 42, 72],
    [33, 24, 35, 50, 56, 26, 36, 59, 19, 47, 23, 72, 13, 60, 8],
    [42, 11, 5, 65, 18, 36, 69, 72, 45, 14, 52, 56, 68, 62, 59],
    [45, 23, 63, 60, 56, 57, 42, 73, 33, 12, 64, 29, 21, 31, 44],
    [41, 24, 46, 6, 34, 13, 11, 71, 67, 60, 74, 27, 3, 49, 55],
    [37, 13, 51, 48, 4, 68, 58, 63, 38, 74, 3, 61, 20, 16, 56],
    [62, 56, 1, 6, 21, 63, 3, 43, 69, 41, 32, 27, 61, 45, 59],
    [40, 37, 44, 71, 39, 21, 34, 58, 17, 43, 24, 64, 5, 65, 63],
    [65, 27, 56, 7, 75, 4, 59, 6, 20, 24, 64, 36, 45, 68, 22],
    [3, 24, 58, 41, 47, 75, 8, 45, 68, 27, 17, 59, 4, 19, 9],
    [29, 20, 42, 48, 1, 52, 40, 73, 6, 61, 15, 13, 39, 74, 62],
    [40, 12, 28, 61, 62, 37, 30, 45, 27, 50, 59, 16, 41, 64, 4],
    [56, 64, 70, 52, 6, 68, 42, 12, 1, 63, 7, 67, 75, 11, 29],
    [1, 25, 34, 63, 4, 52, 27, 47, 55, 68, 48, 13, 20, 32, 40],
    [11, 67, 54, 6, 30, 71, 64, 12, 20, 25, 5, 7, 3, 56, 47],
    [73, 58, 72, 48, 15, 9, 20, 26, 41, 51, 68, 47, 38, 33, 12],
    [50, 18, 20, 75, 5, 65, 48, 46, 12, 56, 43, 31, 11, 55, 36],
    [24, 6, 27, 41, 52, 57, 5, 74, 36, 38, 47, 59, 10, 49, 28],
    [35, 13, 10, 14, 22, 37, 54, 73, 52, 72, 75, 38, 43, 45, 12],
    [57, 75, 31, 41, 56, 47, 65, 34, 74, 27, 23, 16, 38, 6, 70],
    [65, 63, 45, 14, 54, 5, 61, 34, 25, 17, 24, 11, 18, 74, 7],
    [70, 43, 25, 50, 72, 73, 57, 46, 5, 31, 41, 38, 21, 61, 36],
    [51, 10, 53, 68, 70, 16, 62, 7, 5, 8, 45, 42, 29, 59, 37],
    [33, 52, 57, 34, 75, 63, 22, 25, 8, 15, 14, 16, 72, 5, 41],
    [50, 59, 66, 1, 4, 16, 56, 25, 44, 43, 12, 7, 52, 61, 55],
    [62, 26, 4, 57, 3, 69, 59, 22, 35, 38, 20, 12, 68, 55, 9],
    [64, 71, 68, 53, 20, 29, 55, 16, 32, 38, 40, 11, 63, 47, 12],
    [75, 65, 55, 74, 33, 34, 63, 32, 28, 40, 23, 66, 16, 24, 53],
    [1, 4, 57, 64, 47, 41, 70, 8, 44, 59, 65, 26, 16, 67, 66],
    [20, 67, 71, 72, 4, 48, 12, 63, 59, 44, 53, 6, 32, 21, 10],
    [65, 33, 6, 44, 20, 41, 1, 64, 74, 49, 35, 43, 10, 7, 34],
    [45, 60, 11, 68, 64, 43, 10, 71, 73, 6, 48, 49, 28, 63, 2],
    [40, 74, 32, 50, 38, 35, 47, 6, 41, 44, 54, 46, 33, 60, 20],
    [53, 13, 55, 22, 68, 52, 9, 32, 24, 40, 21, 46, 26, 2, 31],
    [44, 16, 32, 14, 46, 50, 62, 60, 57, 8, 28, 53, 9, 49, 35],
    [1, 18, 72, 59, 40, 25, 63, 51, 43, 21, 73, 7, 16, 61, 23],
    [42, 36, 62, 60, 75, 63, 19, 45, 68, 46, 37, 51, 3, 71, 72],
    [53, 35, 74, 16, 34, 43, 14, 23, 59, 12, 2, 13, 19, 25, 38],
    [71, 5, 18, 27, 51, 1, 68, 32, 44, 8, 9, 14, 24, 65, 12],
    [55, 60, 45, 54, 42, 4, 14, 29, 7, 46, 3, 69, 36, 25, 41],
    [13, 55, 65, 26, 56, 39, 31, 9, 73, 23, 11, 10, 29, 45, 6],
    [62, 71, 23, 74, 7, 19, 42, 29, 73, 61, 45, 66, 34, 40, 28],
    [3, 73, 43, 58, 54, 25, 70, 60, 18, 6, 2, 69, 28, 29, 10]
]

alpha = alpha_star / 2
n1, n2 = len(indices1), len(indices2)
k = len(indices1[0])

# Summing values for arr1 and arr2 based on indices
arr1 = np.array([np.sum([data[idx-1][0] for idx in row]) for row in indices1])
arr2 = np.array([np.sum([data[idx-1][1] for idx in row]) for row in indices2])

# Normalizing by sqrt(k)
arr1 /= np.sqrt(k)
arr2 /= np.sqrt(k)

# Mean and variance
mean1, var1 = np.mean(arr1), np.var(arr1, ddof=1)
mean2, var2 = np.mean(arr2), np.var(arr2, ddof=1)

# Degrees of freedom for sample 1 and sample 2
dof1, dof2 = n1 - 1, n2 - 1

# F-statistic calculation
Fcalc = var1 / var2
F1 = f.ppf(alpha / 2, dof1, dof2)
F2 = f.ppf(1 - (alpha / 2), dof1, dof2)

# Calculate Standard error and Combined degrees of freedom based on Fcalc
if (F1 < Fcalc < F2): # Case where variances of the two populations are equal
    std_err = np.sqrt(((1 / n1) + (1 / n2))*(var1*dof1 + var2*dof2) / (dof1 + dof2)) # Standard error or pooled variance
    dof = dof1 + dof2
else: # Case where variances of the two populations are not equal
    std_err = np.sqrt((var1 / n1) + (var2 / n2))
    dof = (((var1 / n1) + (var2 / n2)) ** 2) / (((var1/n1) ** 2) / dof1 + ((var2/n2) ** 2) / dof2) # Satterthwaite approximation

# T-statistic and confidence interval
Tcalc = (mean1 - mean2) / std_err
ci_low = (mean1 - mean2) + t.ppf(alpha / 2, dof) * std_err
ci_high = (mean1 - mean2) - t.ppf(alpha / 2, dof) * std_err

# To account for the fact that we are averaging over k elements, because we are calculating the confidence interval based on an average or a normalized number of samples
ci_low /= np.sqrt(k)
ci_high /= np.sqrt(k)

# p-values for F and `T tests
pvalueT = 2 * min(t.cdf(Tcalc, dof), t.sf(Tcalc, dof))
pvalueF = 2 * min(f.cdf(Fcalc, dof1, dof2), f.sf(Fcalc, dof1, dof2))

# Print results
print(f'Confidence Interval: [{ci_low:.6f}, {ci_high:.6f}]')
print(f'p-value for T: {pvalueT:.4e}')
print(f'p-value for F: {pvalueF:.4e}')
